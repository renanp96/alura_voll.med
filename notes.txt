Annotations do Springboot:
@RestController - Informa para o spring que a classe informada é um controlador de API Rest.
@RequestMapping - Insere uma extensão para o caminho da URL.
@RestControllerAdvice - Indica para o spring que a classe irá manipular e exceptions durante a requisição Rest.
@GetMapping - Informa ao spring que o metodo é um endpoint é uma requisição GET.
@PostMapping - Informa ao spring que o metodo é um endpoint é uma requisição POST.
@Lombok - Gera automaticamente os getters e setters de uma classe.
@Bean - Anotação que expoem o retorno de um metodo no springboot.
@Autowired - Instancia um objeto dentro de outra classe.

Termos Tecnicos:
Data Transfer Object(DTO) - Classe que representa o dados de entrada e saida enviados pela a API.
Data Access Object(DAO) - Classes utilizadas na persistencia de dados, separando regras de negocio de regras de acesso do banco de dados.
Controller - Classe que irá controlar a passagem dos dados e envia-los para a classe DTO.
Java Persistence API (JPA) - descreve uma interface comum para frameworks de mapeamento objeto-relacional(ORM).
Repository - O repositório é um mecanismo para encapsular armazenamento, recuperação e comportamento de pesquisa, que emula uma coleção de objetos.
Bean Validation - Realiza a validação de campos do formulario, o Bean Validation é composto de um conjunto anotações e APIs do Java e do Spring Framework.
Migrations - scripts ou codigos que descrevem as estruturas de um banco de dados e realizam seu versionamento, semelhante ao git.

Features da Versão 17 do Java:
Records - é um recurso que permite representar uma classe imutável, contendo apenas atributos, construtor e métodos de leitura, de uma maneira muito simples e enxuta.
    Esse tipo de classe se encaixa perfeitamente para representar classes DTO, já que seu objetivo é apenas representar dados que serão recebidos ou devolvidos pela API,
    sem nenhum tipo de comportamento.

Categoria de códigos HTTP:
Os códigos HTTP (ou HTTPS) possuem três dígitos, sendo que o primeiro dígito significa a classificação dentro das possíveis cinco categorias.
    1XX: Informativo – a solicitação foi aceita ou o processo continua em andamento;
    2XX: Confirmação – a ação foi concluída ou entendida;
    3XX: Redirecionamento – indica que algo mais precisa ser feito ou precisou ser feito para completar a solicitação;
    4XX: Erro do cliente – indica que a solicitação não pode ser concluída ou contém a sintaxe incorreta;
    5XX: Erro no servidor – o servidor falhou ao concluir a solicitação.

Link uteis:
Inicializador do projeto springboot: https://start.spring.io/
Configurações do properties no spring: https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html
Requisições HTTP: https://http.cat/

Padrão de Novas Funcionalidades no Spring:
    -Controllers:
        *Responsaveis por lidar com as requisições HTTP e gerenciar o fluxo de controle dos dados.
        *Devem ser nomeadas de forma descritiva e representativa da funcionalidade que está sendo gerenciada.
        *Logicas de nogocio devem ser evitada nos controllers.
    -DTOs:
        *Utilizados para transferir os dados entre a camada de apresentação(controllers) e a camada de serviço.
        *Devem conter apenas os campos necessarios para a operação em questão, evitando o excesso de informação.
        *Os nomes das DTOs devem ser claros e concisos, refletindo o contexto da operação.
    -Entidades JPA:
        *Representam os objetos que serão persistidos no banco de dados.
        *As Entidades JPA devem representar apenas os dados, evitando regras de negocios complexas.
        *O nome das entidade dever ser semelhantes as suas correspondentes tabelas no banco de dados.
    -Repositories:
        *Responsaveis por acessar o banco de dados e realizar interações com a Entidades JPA.
        *O nome de um Repository deve ser semelhante a Entidade JPA no qua está associada, seguido pela palavra "Repository".
    -Migrations:
        *São scripts ou codigos que descrevem as estruturas do banco de dados e realizam o versionamento do mesmo.
        *As migrations devem sempre criadas quando ocorrer uma alteração no modelo dos dados ou na estrutura do banco de dados.

SprinDocs: